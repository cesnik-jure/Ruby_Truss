require_relative 'new_methods'
require 'rexml/document'
include REXML

# Open .xml file named truss_name in the Samples/truss_name/ directory.
truss_name = $truss_name
file = File.new("Samples/" + truss_name + "/" + truss_name + ".xml", "r")
doc = Document.new(file)

root = doc.root
truss_name = root.attributes["name"]

# Collect the number of nodes and elements in truss.
nodes = root.elements["nodes"]
nu_node = nodes.attributes["nu_node"].to_i

elements = root.elements["elements"]
nu_el = elements.attributes["nu_el"].to_i

class Plane_Truss
  
  # Defines self methods for calling the instance variables inside the Plane_Truss class and its subclasses.
  def self.xy_node; puts @xy_node end
  def self.su; puts @su end
  def self.f; puts @f end
  def self.em_a; puts @em_a end
  def self.el_node; puts @el_node end
      
  class Graphics
    # Create corresponding empty matrixes (filled with 0s) for all the required data.
    @xy_node = Matrix.build(nu_node, 2) {|row, col| 0 } 
    @su = Matrix.build(nu_node, 2) {|row, col| 0 }
    @f = Matrix.build(nu_node, 2) {|row, col| 0 }
    @em_a = Matrix.build(nu_el, 2) {|row, col| 0 }
    @el_node = Matrix.build(nu_el, 2) {|row, col| 0 }  
  end
end


# Read and write into a corresponding array all the node data (coordinates, supports, forces). 
coordinates_x = XPath.each( doc, "truss/nodes/node/coordinate_x/text()") { |text| text }
coordinates_y = XPath.each( doc, "truss/nodes/node/coordinate_y/text()") { |text| text }
supports_x = XPath.each( doc, "truss/nodes/node/support_x/text()") { |text| text }
supports_y = XPath.each( doc, "truss/nodes/node/support_y/text()") { |text| text }
forces_x = XPath.each( doc, "truss/nodes/node/force_x/text()") { |text| text }
forces_y = XPath.each( doc, "truss/nodes/node/force_y/text()") { |text| text }

# Read and write into a corresponding array all the element data (start/end nodes, material and section properties). 
start_nodes = XPath.each( doc, "truss/elements/element/start_node/text()") { |text| text }
end_nodes = XPath.each( doc, "truss/elements/element/end_node/text()") { |text| text }
elastic_modules = XPath.each( doc, "truss/elements/element/elastic_modulus/text()") { |text| text }
section_areas = XPath.each( doc, "truss/elements/element/section_area/text()") { |text| text }

class Plane_Truss  
  # Write node matrixes from node arrays. 
  for i in 0..(nu_node - 1) do
    for j in 0..1 do
      @@xy_node.[]=(i, j, (j == 0 ? coordinates_x[i].to_s.to_i : coordinates_y[i].to_s.to_i))
      su.[]=(i, j, (j == 0 ? supports_x[i].to_s.to_i : supports_y[i].to_s.to_i))
      f.[]=(i, j, (j == 0 ? forces_x[i].to_s.to_i : forces_y[i].to_s.to_i))
    end
  end
  
  # Write element matrixes from element arrays.
  for i in 0..(nu_el - 1) do
    for j in 0..1 do
      el_node.[]=(i, j, (j == 0 ? start_nodes[i].to_s.to_i : end_nodes[i].to_s.to_i))
      em_a.[]=(i, j, (j == 0 ? elastic_modules[i].to_s.to_i : section_areas[i].to_s.to_i))
    end
  end
end

file.close




